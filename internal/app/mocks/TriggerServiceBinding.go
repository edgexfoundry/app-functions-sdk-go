// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	appfunction "github.com/edgexfoundry/app-functions-sdk-go/v2/internal/appfunction"
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v2/pkg/interfaces"

	mock "github.com/stretchr/testify/mock"

	runtime "github.com/edgexfoundry/app-functions-sdk-go/v2/internal/runtime"

	types "github.com/edgexfoundry/go-mod-messaging/v2/pkg/types"
)

// TriggerServiceBinding is an autogenerated mock type for the TriggerServiceBinding type
type TriggerServiceBinding struct {
	mock.Mock
}

// GetMatchingPipelines provides a mock function with given fields: incomingTopic
func (_m *TriggerServiceBinding) GetMatchingPipelines(incomingTopic string) []*interfaces.FunctionPipeline {
	ret := _m.Called(incomingTopic)

	var r0 []*interfaces.FunctionPipeline
	if rf, ok := ret.Get(0).(func(string) []*interfaces.FunctionPipeline); ok {
		r0 = rf(incomingTopic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*interfaces.FunctionPipeline)
		}
	}

	return r0
}

// LoadCustomConfig provides a mock function with given fields: config, sectionName
func (_m *TriggerServiceBinding) LoadCustomConfig(config interfaces.UpdatableConfig, sectionName string) error {
	ret := _m.Called(config, sectionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.UpdatableConfig, string) error); ok {
		r0 = rf(config, sectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessMessage provides a mock function with given fields: appContext, envelope, pipeline
func (_m *TriggerServiceBinding) ProcessMessage(appContext *appfunction.Context, envelope types.MessageEnvelope, pipeline *interfaces.FunctionPipeline) *runtime.MessageError {
	ret := _m.Called(appContext, envelope, pipeline)

	var r0 *runtime.MessageError
	if rf, ok := ret.Get(0).(func(*appfunction.Context, types.MessageEnvelope, *interfaces.FunctionPipeline) *runtime.MessageError); ok {
		r0 = rf(appContext, envelope, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.MessageError)
		}
	}

	return r0
}
