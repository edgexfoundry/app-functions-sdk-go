// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	types "github.com/edgexfoundry/go-mod-messaging/v2/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// MessageClient is an autogenerated mock type for the MessageClient type
type MessageClient struct {
	mock.Mock
}

// Connect provides a mock function with given fields:
func (_m *MessageClient) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Disconnect provides a mock function with given fields:
func (_m *MessageClient) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: message, topic
func (_m *MessageClient) Publish(message types.MessageEnvelope, topic string) error {
	ret := _m.Called(message, topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.MessageEnvelope, string) error); ok {
		r0 = rf(message, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: topics, messageErrors
func (_m *MessageClient) Subscribe(topics []types.TopicChannel, messageErrors chan error) error {
	ret := _m.Called(topics, messageErrors)

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.TopicChannel, chan error) error); ok {
		r0 = rf(topics, messageErrors)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
