// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/edgexfoundry/app-functions-sdk-go/v4/pkg/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// StoreClient is an autogenerated mock type for the StoreClient type
type StoreClient struct {
	mock.Mock
}

// Disconnect provides a mock function with given fields:
func (_m *StoreClient) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFromStore provides a mock function with given fields: o
func (_m *StoreClient) RemoveFromStore(o interfaces.StoredObject) error {
	ret := _m.Called(o)

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.StoredObject) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveFromStore provides a mock function with given fields: appServiceKey
func (_m *StoreClient) RetrieveFromStore(appServiceKey string) ([]interfaces.StoredObject, error) {
	ret := _m.Called(appServiceKey)

	var r0 []interfaces.StoredObject
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]interfaces.StoredObject, error)); ok {
		return rf(appServiceKey)
	}
	if rf, ok := ret.Get(0).(func(string) []interfaces.StoredObject); ok {
		r0 = rf(appServiceKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.StoredObject)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appServiceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: o
func (_m *StoreClient) Store(o interfaces.StoredObject) (string, error) {
	ret := _m.Called(o)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interfaces.StoredObject) (string, error)); ok {
		return rf(o)
	}
	if rf, ok := ret.Get(0).(func(interfaces.StoredObject) string); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interfaces.StoredObject) error); ok {
		r1 = rf(o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: o
func (_m *StoreClient) Update(o interfaces.StoredObject) error {
	ret := _m.Called(o)

	var r0 error
	if rf, ok := ret.Get(0).(func(interfaces.StoredObject) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStoreClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewStoreClient creates a new instance of StoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStoreClient(t mockConstructorTestingTNewStoreClient) *StoreClient {
	mock := &StoreClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
